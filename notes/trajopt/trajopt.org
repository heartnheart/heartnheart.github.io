* Trajopt
** dubins_car.cpp
#+begin_src c++
  RobotAndDOFPtr rad(
                     new RobotAndDOF(robot, vector<int>(), 11, OR::Vector(0, 0, 1)));
#+end_src
1. 11 stands for the enum OpenRAVE::DOFAffine value, the doc is found at [[http://openrave.org/docs/latest_stable/coreapihtml/namespaceOpenRAVE.html#abc0e247f60308de4073a64d487acfef6ae01613d409bfeac95cd6eea0c396c0f9][OpenRAVE::DOFAffine]]. However, the author use a magic number here, by checking the [[http://openrave.org/docs/latest_stable/coreapihtml/openrave_8h_source.html#l02347][souce code]], I found that 11 stands for =DOF_X|DOF_Y|DOF_RotationAxis=, which means the robot can move in the x and y direction, and can rotate around an axis.
2. The fourth argument =OR::Vector(0, 0, 1)= is the rotation axis of the robot.
* Openrave
** OpenRAVE::Transform
This is a typedef of openrave type =RaveTransform=
#+begin_src cpp
  typedef RaveTransform<dReal> Transform;
#+end_src
In =RaveTransform= class, the public attributes =rot= is a quaternion, as pointed out [[http://openrave.org/docs/latest_stable/coreapihtml/classOpenRAVE_1_1geometry_1_1RaveTransform.html][here]].

The function =RaveGetTransformFromAffineDOFValues= converts affine dof values into a transform, with the doc [[http://openrave.org/docs/latest_stable/coreapihtml/namespaceOpenRAVE.html#a87734b13e3ec140e302d750a9429e4ec][here]].
** OpenRave::Kinbody::SetTransform(const Transform& transform)
set the transform of the first link (the rest of the links are computed based on the joint values). The doc is [[http://openrave.org/docs/latest_stable/coreapihtml/classOpenRAVE_1_1KinBody.html#ae4e529e3bab78c4399ecc387f6ccd59b][here]].



* Mindmap
** RobotAndDOF
